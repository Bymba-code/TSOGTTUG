const prisma = require('../../../Middlewares/prisma');
const bcrypt = require('bcrypt'); // üîí bcrypt –∞—à–∏–≥–ª–∞–Ω–∞

const UPDATE_TEACHER = async (req, res) => {
    try {
        const { id } = req.params;
        const { firstName, lastName, register, kode, password } = req.body;

        // üß© ID —à–∞–ª–≥–∞—Ö
        if (!id || isNaN(id)) {
            return res.status(400).json({
                success: false,
                data: [],
                message: "–•“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –¥—É—Ç—É—É –±–∞–π–Ω–∞ —ç—Å–≤—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞."
            });
        }

        // üîç –ë–∞–≥—à –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        const teacher = await prisma.teacher.findUnique({
            where: { id: parseInt(id) }
        });

        if (!teacher) {
            return res.status(404).json({
                success: false,
                data: [],
                message: "–ë–∞–≥—à–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π."
            });
        }

        // üîß –®–∏–Ω—ç—á–ª—ç—Ö ”©–≥”©–≥–¥–ª–∏–π–≥ —Ü—É–≥–ª—É—É–ª–∞—Ö
        const updateData = {};

        if (firstName) updateData.firstname = firstName;
        if (lastName) updateData.lastname = lastName;
        if (register) updateData.register = register;
        if (kode) updateData.kode = kode;

        // üîí –ù—É—É—Ü “Ø–≥–∏–π–≥ hash —Ö–∏–π—Ö
        if (password) {
            const hashedPassword = await bcrypt.hash(password, 10);
            updateData.password = hashedPassword;
        }

        // üö´ –•–æ–æ—Å–æ–Ω update —à–∞–ª–≥–∞—Ö
        if (Object.keys(updateData).length === 0) {
            return res.status(400).json({
                success: false,
                data: [],
                message: "–®–∏–Ω—ç—á–ª—ç—Ö ”©–≥”©–≥–¥”©–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞."
            });
        }

        // üíæ –ú—ç–¥—ç—ç–ª–ª–∏–π–≥ —à–∏–Ω—ç—á–ª—ç—Ö
        const result = await prisma.teacher.update({
            where: { id: parseInt(id) },
            data: updateData
        });

        // ‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É
        return res.status(200).json({
            success: true,
            data: result,
            message: "–ë–∞–≥—à–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–∏–ª–ª—ç—ç."
        });

    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: false,
            data: [],
            message: "–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. " + err.message
        });
    }
};

module.exports = UPDATE_TEACHER;
